{"version":3,"sources":["Components/ItemListElement.js","Components/ListTodoItems.js","Components/MainApp.js","App.js","serviceWorker.js","index.js"],"names":["ItemListElement","item","deleteHandler","editHandler","useState","isRead","setIsRead","id","onClick","className","text","ListTodoItems","itemList","map","x","key","MainApp","todoContent","setTodoContent","setItemList","updateItemId","setUpdateItemId","refContainer","useRef","useEffect","current","focus","type","ref","value","onChange","event","target","onKeyDown","e","length","foundItem","find","itemId","itemValue","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAEaA,EAAkB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YAAkB,EAC3CC,oBAAS,GADkC,mBAChEC,EADgE,KACxDC,EADwD,KAevE,OACE,4BACE,4BAAQC,GAAG,WAAWC,QAdA,WACxBF,GAAWD,KAcNA,GACC,0BAAMI,UAAU,aAAhB,UAAgCR,EAAKM,GAArC,cAA6CN,EAAKS,QAElDL,GAAU,wCAAUJ,EAAKM,GAAf,cAAuBN,EAAKS,QAG1C,yBAAKH,GAAG,YACN,4BAAQC,QAlBW,WACvBL,EAAYF,EAAKM,GAAIN,EAAKS,QAiBtB,QACA,4BAAQF,QAfa,WACzBN,EAAcD,EAAKM,MAcf,aCzBKI,EAAgB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAUV,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,YACvD,OACE,4BACGS,EAASC,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,CAAiBC,IAAKD,EAAEP,GAAIN,KAAMa,EAChCZ,cAAeA,EACfC,YAAaA,SCNVa,EAAU,WAAM,MAEWZ,mBAAS,IAFpB,mBAEpBa,EAFoB,KAEPC,EAFO,OAGKd,mBAAS,IAHd,mBAGpBQ,EAHoB,KAGVO,EAHU,OAIaf,oBAAU,GAJvB,mBAIpBgB,EAJoB,KAINC,EAJM,KAKrBC,EAAeC,iBAAO,MAE5BC,qBAAU,WAER,OADAF,EAAaG,QAAQC,QACd,eAGN,IA0CH,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,eAChB,2BAAOF,GAAG,UAAUoB,KAAK,OACrBC,IAAKN,EACLO,MAAOZ,EACPa,SApCW,SAACC,GACpBb,EAAea,EAAMC,OAAOH,QAoCpBI,UAjCa,SAACC,GACtB,GAAc,UAAVA,EAAEnB,IAAN,CAIA,IAAsB,IAAlBK,EAEFD,GAAY,SAACP,GAAD,4BAAkBA,GAAlB,CAA4B,CACtCL,GAAIK,EAASuB,OAAS,EACtBzB,KAAMO,YAIV,CACE,IAAMmB,EAAYxB,EAASyB,MAAK,SAACvB,GAAD,OAAOA,EAAEP,KAAOa,KAEvB,qBAAdgB,IACTA,EAAU1B,KAAOO,GAGnBI,GAAiB,GAGnBH,EAAe,SAab,yBAAKT,UAAU,aACb,4BACE,0BAAMF,GAAG,YACNK,EAASuB,QAFd,+BAOF,6BAAS1B,UAAU,kBACjB,kBAAC,EAAD,CACEG,SAAUA,EACVT,YA7DS,SAACmC,EAAQC,GACxBrB,EAAeqB,GACflB,EAAgBiB,GAChBhB,EAAaG,QAAQC,SA2DfxB,cAxDW,SAACoC,GAClBnB,EAAYP,EAAS4B,QAAO,SAACvC,GAAD,OAAUA,EAAKM,KAAO+B,Y,MCZvCG,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9aac4b0d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport const ItemListElement = ({ item, deleteHandler, editHandler }) => {\n  const [isRead, setIsRead] = useState(false);\n\n  const checkEventHandler = () => {\n    setIsRead(!isRead);\n  };\n\n  const editEventHandler = () => {\n    editHandler(item.id, item.text);\n  };\n\n  const deleteEventHandler = () => {\n    deleteHandler(item.id);\n  };\n\n  return (\n    <li>\n      <button id=\"btn-Text\" onClick={checkEventHandler}>\n        {isRead && (\n          <span className=\"read-item\">{`${item.id} - ${item.text}`}</span>\n        )}\n        {!isRead && <span>{`${item.id} - ${item.text}`}</span>}\n      </button>\n\n      <div id=\"btn-Func\">\n        <button onClick={editEventHandler}>Edit</button>\n        <button onClick={deleteEventHandler}>Delete</button>\n      </div>\n    </li>\n  );\n};\n","import React from \"react\";\nimport { ItemListElement } from \"./ItemListElement\";\n\nexport const ListTodoItems = ({ itemList, deleteHandler, editHandler}) => {\n  return (\n    <ul>\n      {itemList.map((x) => (\n        <ItemListElement key={x.id} item={x}\n          deleteHandler={deleteHandler}\n          editHandler={editHandler}/>\n      ))}\n    </ul>\n  );\n};\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { ListTodoItems } from \"./ListTodoItems\";\n\nexport const MainApp = () => {\n  // Set state\n  const [todoContent, setTodoContent] = useState(\"\");\n  const [itemList, setItemList] = useState([]);\n  const [updateItemId, setUpdateItemId] = useState(-1);\n  const refContainer = useRef(null);\n\n  useEffect(() => {\n    refContainer.current.focus();\n    return () => {\n      \n    }\n  }, []);\n\n  const editItem = (itemId, itemValue) => {\n    setTodoContent(itemValue);\n    setUpdateItemId(itemId);\n    refContainer.current.focus();\n  };\n\n  const deleteItem = (itemId) => {\n    setItemList(itemList.filter((item) => item.id !== itemId));\n  };\n\n  const handleChange = (event) => {\n    setTodoContent(event.target.value);\n  }\n\n  const keyDownHandler = (e) => {\n    if (e.key !== \"Enter\") {\n      return;\n    }\n\n    if (updateItemId === -1) {\n     // Async\n      setItemList((itemList) => [...itemList, {\n        id: itemList.length + 1,\n        text: todoContent,\n      }]);\n    } \n    else \n    {\n      const foundItem = itemList.find((x) => x.id === updateItemId);\n\n      if (typeof foundItem !== \"undefined\") {\n        foundItem.text = todoContent;\n      }\n\n      setUpdateItemId(-1);\n    }\n\n    setTodoContent(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-TextBox\">\n        <input id=\"textBox\" type=\"text\" \n            ref={refContainer}\n            value={todoContent} \n            onChange={handleChange}  \n            onKeyDown={keyDownHandler} />\n      </header>\n\n      <nav className=\"App-Label\">\n        <h1>\n          <span id=\"numTasks\">\n            {itemList.length}\n          </span>\n          TASKS TO-DO With Travis CI</h1>\n      </nav>\n\n      <section className=\"App-Collection\">\n        <ListTodoItems\n          itemList={itemList}\n          editHandler={editItem}\n          deleteHandler={deleteItem}          \n        />\n      </section>\n    </div>\n  );\n};\n\nexport default MainApp;\n","import React from \"react\";\nimport { MainApp } from \"./Components/MainApp\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <MainApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}